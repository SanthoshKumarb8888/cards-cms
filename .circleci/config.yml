version: 2.1

executors:
  docker-executor:
    docker:
      - image: circleci/openjdk:11-jdk
    working_directory: ~/repo

jobs:
  checkout:
    executor: docker-executor
    steps:
      - checkout

  build:
    executor: docker-executor
    steps:
      - checkout
      - run: mvn clean package

  test:
    executor: docker-executor
    steps:
      - checkout
      - run: mvn test
      - store_test_results:
          path: target/surefire-reports

  static_code_analysis:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Run SonarQube Analysis
          command: mvn sonar:sonar -Dsonar.host.url=$SONARQUBE_URL -Dsonar.login=$SONARQUBE_CREDENTIALS
      - run:
          name: Wait for Quality Gate
          command: |
            STATUS=$(curl -u $SONARQUBE_CREDENTIALS $SONARQUBE_URL/api/qualitygates/project_status?projectKey=$SONARQUBE_PROJECT_KEY | jq -r '.projectStatus.status')
            if [ "$STATUS" != "OK" ]; then
              echo "Pipeline aborted due to quality gate failure: $STATUS"
              exit 1

  build_docker_image:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - setup_remote_docker
      - run: docker build -t $REGISTRY/$IMAGE_NAME:$CIRCLE_BUILD_NUM .

  vulnerability_scan:
    docker:
      - image: aquasec/trivy:latest
    steps:
      - checkout
      - run:
          name: Run Trivy Scan
          command: |
            trivy image $REGISTRY/$IMAGE_NAME:$CIRCLE_BUILD_NUM
            if [ $? -ne 0 ]; then
              echo "Vulnerability scan failed for image: $REGISTRY/$IMAGE_NAME:$CIRCLE_BUILD_NUM"
              exit 1

  push_to_ecr:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Push Docker Image
          command: |
            echo $DOCKER_PASSWORD | docker login $REGISTRY -u $DOCKER_USERNAME --password-stdin
            docker push $REGISTRY/$IMAGE_NAME:$CIRCLE_BUILD_NUM

  update_argocd_image:
    docker:
      - image: argoproj/argocd:latest
    steps:
      - checkout
      - run:
          name: Update ArgoCD Image
          command: |
            argocd login your-argocd-server --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure
            argocd app set your-app-name -p image=$REGISTRY/$IMAGE_NAME:$CIRCLE_BUILD_NUM
            argocd app sync your-app-name

  integration_tests:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run: pytest tests/integration
      - store_test_results:
          path: test-reports
      - run:
          name: Rollback ArgoCD Deployment
          command: |
            argocd login your-argocd-server --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure
            argocd app rollback your-app-name

workflows:
  version: 2
  build-deploy:
    jobs:
      - checkout
      - build
      - test
      - static_code_analysis
      - build_docker_image
      - vulnerability_scan
      - push_to_ecr
      - update_argocd_image
      - integration_tests
